// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using _4Lab.Satisfaction.Data;

namespace _4Lab.Satisfaction.Data.Migrations
{
    [DbContext(typeof(SatisfactionContext))]
    [Migration("20211117132733_alter schema")]
    partial class alterschema
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Satisfaction")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("_4Lab.Core.Audit.Historic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Entity")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Values")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Historic", "Audit", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("_4Lab.Satisfaction.Domain.Entities.DeliveryResults", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<int>("DeliveryPunctuality")
                        .HasColumnType("integer");

                    b.Property<int>("DeliveryResultTime")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("SatisfactionSurveyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DeliveryResults");
                });

            modelBuilder.Entity("_4Lab.Satisfaction.Domain.Entities.HowSatisfied", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<int>("HowSatisfiedUre")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("SatisfactionSurveyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("HowSatisfied");
                });

            modelBuilder.Entity("_4Lab.Satisfaction.Domain.Entities.OurDifferential", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<int>("Description")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("SatisfactionSurveyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SatisfactionSurveyId");

                    b.ToTable("OurDifferential");
                });

            modelBuilder.Entity("_4Lab.Satisfaction.Domain.Entities.OverallImpression", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<int>("FriendsRecommendation")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("SatisfactionSurveyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OverallImpression");
                });

            modelBuilder.Entity("_4Lab.Satisfaction.Domain.Entities.PersonalInformations", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("SatisfactionSurveyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PersonalInformations");
                });

            modelBuilder.Entity("_4Lab.Satisfaction.Domain.Entities.Reception", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int>("AttendanceAgility")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("SatisfactionSurveyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<int>("WaitingTime")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Reception");
                });

            modelBuilder.Entity("_4Lab.Satisfaction.Domain.Entities.Sanitation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("LocalSanitation")
                        .HasColumnType("integer");

                    b.Property<Guid>("SatisfactionSurveyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sanitation");
                });

            modelBuilder.Entity("_4Lab.Satisfaction.Domain.Entities.SatisfactionSurvey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("DeliveryResultsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("HowSatisfiedId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("OurDifferentialId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OverallImpressionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PersonalInformationsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReceptionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SanitationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TecnicalAreaId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("WhySearchId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryResultsId")
                        .IsUnique();

                    b.HasIndex("HowSatisfiedId")
                        .IsUnique();

                    b.HasIndex("OverallImpressionId")
                        .IsUnique();

                    b.HasIndex("PersonalInformationsId")
                        .IsUnique();

                    b.HasIndex("ReceptionId")
                        .IsUnique();

                    b.HasIndex("SanitationId")
                        .IsUnique();

                    b.HasIndex("TecnicalAreaId")
                        .IsUnique();

                    b.ToTable("SatisfactionSurveys");
                });

            modelBuilder.Entity("_4Lab.Satisfaction.Domain.Entities.TecnicalArea", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<int>("ExamOrientation")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ProfissionalHability")
                        .HasColumnType("integer");

                    b.Property<Guid>("SatisfactioSurveyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<int>("WaitingTime")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("TecnicalArea");
                });

            modelBuilder.Entity("_4Lab.Satisfaction.Domain.Entities.WhySearch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ResearchQuestions")
                        .HasColumnType("integer");

                    b.Property<Guid>("SatisfactionSurveyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SatisfactionSurveyId");

                    b.ToTable("WhySearch");
                });

            modelBuilder.Entity("_4Lab.Satisfaction.Domain.Entities.OurDifferential", b =>
                {
                    b.HasOne("_4Lab.Satisfaction.Domain.Entities.SatisfactionSurvey", "SatisfactionSurvey")
                        .WithMany("OurDifferential")
                        .HasForeignKey("SatisfactionSurveyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SatisfactionSurvey");
                });

            modelBuilder.Entity("_4Lab.Satisfaction.Domain.Entities.SatisfactionSurvey", b =>
                {
                    b.HasOne("_4Lab.Satisfaction.Domain.Entities.DeliveryResults", "DeliveryResults")
                        .WithOne("SatisfactionSurvey")
                        .HasForeignKey("_4Lab.Satisfaction.Domain.Entities.SatisfactionSurvey", "DeliveryResultsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("_4Lab.Satisfaction.Domain.Entities.HowSatisfied", "HowSatisfied")
                        .WithOne("SatisfactionSurvey")
                        .HasForeignKey("_4Lab.Satisfaction.Domain.Entities.SatisfactionSurvey", "HowSatisfiedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("_4Lab.Satisfaction.Domain.Entities.OverallImpression", "OverallImpression")
                        .WithOne("SatisfactionSurvey")
                        .HasForeignKey("_4Lab.Satisfaction.Domain.Entities.SatisfactionSurvey", "OverallImpressionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("_4Lab.Satisfaction.Domain.Entities.PersonalInformations", "PersonalInformations")
                        .WithOne("SatisfactionSurvey")
                        .HasForeignKey("_4Lab.Satisfaction.Domain.Entities.SatisfactionSurvey", "PersonalInformationsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("_4Lab.Satisfaction.Domain.Entities.Reception", "Reception")
                        .WithOne("SatisfactionSurvey")
                        .HasForeignKey("_4Lab.Satisfaction.Domain.Entities.SatisfactionSurvey", "ReceptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("_4Lab.Satisfaction.Domain.Entities.Sanitation", "Sanitation")
                        .WithOne("SatisfactionSurvey")
                        .HasForeignKey("_4Lab.Satisfaction.Domain.Entities.SatisfactionSurvey", "SanitationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("_4Lab.Satisfaction.Domain.Entities.TecnicalArea", "TecnicalArea")
                        .WithOne("SatisfactionSurvey")
                        .HasForeignKey("_4Lab.Satisfaction.Domain.Entities.SatisfactionSurvey", "TecnicalAreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DeliveryResults");

                    b.Navigation("HowSatisfied");

                    b.Navigation("OverallImpression");

                    b.Navigation("PersonalInformations");

                    b.Navigation("Reception");

                    b.Navigation("Sanitation");

                    b.Navigation("TecnicalArea");
                });

            modelBuilder.Entity("_4Lab.Satisfaction.Domain.Entities.WhySearch", b =>
                {
                    b.HasOne("_4Lab.Satisfaction.Domain.Entities.SatisfactionSurvey", "SatisfactionSurvey")
                        .WithMany("WhySearch")
                        .HasForeignKey("SatisfactionSurveyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SatisfactionSurvey");
                });

            modelBuilder.Entity("_4Lab.Satisfaction.Domain.Entities.DeliveryResults", b =>
                {
                    b.Navigation("SatisfactionSurvey");
                });

            modelBuilder.Entity("_4Lab.Satisfaction.Domain.Entities.HowSatisfied", b =>
                {
                    b.Navigation("SatisfactionSurvey");
                });

            modelBuilder.Entity("_4Lab.Satisfaction.Domain.Entities.OverallImpression", b =>
                {
                    b.Navigation("SatisfactionSurvey");
                });

            modelBuilder.Entity("_4Lab.Satisfaction.Domain.Entities.PersonalInformations", b =>
                {
                    b.Navigation("SatisfactionSurvey");
                });

            modelBuilder.Entity("_4Lab.Satisfaction.Domain.Entities.Reception", b =>
                {
                    b.Navigation("SatisfactionSurvey");
                });

            modelBuilder.Entity("_4Lab.Satisfaction.Domain.Entities.Sanitation", b =>
                {
                    b.Navigation("SatisfactionSurvey");
                });

            modelBuilder.Entity("_4Lab.Satisfaction.Domain.Entities.SatisfactionSurvey", b =>
                {
                    b.Navigation("OurDifferential");

                    b.Navigation("WhySearch");
                });

            modelBuilder.Entity("_4Lab.Satisfaction.Domain.Entities.TecnicalArea", b =>
                {
                    b.Navigation("SatisfactionSurvey");
                });
#pragma warning restore 612, 618
        }
    }
}
